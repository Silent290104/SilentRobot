import asyncio

from pyrogram import filters

from Silent import pgram as app
from Silent.modules.mongo.karma_mongo import (
    alpha_to_int,
    get_karma,
    get_karmas,
    int_to_alpha,
    update_karma,
)
from Silent.utils.errors import capture_err

regex_upvote = r"^((?i)\+|\+\+|\+1|thx|tnx|ty|thank you|thanx|thanks|pro|cool|good|üëç|nice|noice|piro)$"
regex_downvote = r"^(\-|\-\-|\-1|üëé|noob|Noob|gross|fuck off)$"

karma_positive_group = 3
karma_negative_group = 4


from pymongo import MongoClient

from Silent import MONGO_DB_URL

worddb = MongoClient(MONGO_DB_URL)
k = worddb["SilentKarma"]["karma_status"]


async def is_admins(chat_id: int):
    return [
        member.user.id
        async for member in app.iter_chat_members(chat_id, filter="administrators")
    ]


@app.on_message(
    filters.text
    & filters.group
    & filters.incoming
    & filters.reply
    & filters.regex(regex_upvote)
    & ~filters.via_bot
    & ~filters.bot,
    group=karma_positive_group,
)
async def upvote(_, message):
    chat_id = message.chat.id
    is_karma = k.find_one({"chat_id": chat_id})
    if not is_karma:
        if not message.reply_to_message.from_user:
            return
        if not message.from_user:
            return
        if message.reply_to_message.from_user.id == message.from_user.id:
            return
        user_id = message.reply_to_message.from_user.id
        user_mention = message.reply_to_message.from_user.mention
        current_karma = await get_karma(chat_id, await int_to_alpha(user_id))
        if current_karma:
            current_karma = current_karma["karma"]
            karma = current_karma + 1
        else:
            karma = 1
        new_karma = {"karma": karma}
        await update_karma(chat_id, await int_to_alpha(user_id), new_karma)
        await message.reply_text(
            f"…™…¥·¥Ñ Ä·¥á·¥ç·¥á…¥·¥õ·¥á·¥Ö ·¥ã·¥Ä Ä·¥ç·¥Ä  ·¥è“ì +1 {user_mention} \n·¥õ·¥è·¥õ·¥Ä ü ·¥ò·¥è…™…¥·¥õs: {karma}"
        )


@app.on_message(
    filters.text
    & filters.group
    & filters.incoming
    & filters.reply
    & filters.regex(regex_downvote)
    & ~filters.via_bot
    & ~filters.bot,
    group=karma_negative_group,
)
async def downvote(_, message):
    chat_id = message.chat.id
    is_karma = k.find_one({"chat_id": chat_id})
    if is_karma:
        if not message.reply_to_message.from_user:
            return
        if not message.from_user:
            return
        if message.reply_to_message.from_user.id == message.from_user.id:
            return
        user_id = message.reply_to_message.from_user.id
        user_mention = message.reply_to_message.from_user.mention
        current_karma = await get_karma(chat_id, await int_to_alpha(user_id))
        if current_karma:
            current_karma = current_karma["karma"]
            karma = current_karma - 1
        else:
            karma = 1
        new_karma = {"karma": karma}
        await update_karma(chat_id, await int_to_alpha(user_id), new_karma)
        await message.reply_text(
            f"·¥Ö·¥á·¥Ñ Ä·¥á·¥ç·¥á…¥·¥õ·¥á·¥Ö ·¥ã·¥Ä Ä·¥ç·¥Ä ·¥è“ì -1 {user_mention}  \n·¥õ·¥è·¥õ·¥Ä ü ·¥ò·¥è…™…¥·¥õs: {karma}"
        )


@app.on_message(filters.command("karmastats") & filters.group)
@capture_err
async def karma(_, message):
    chat_id = message.chat.id
    if not message.reply_to_message:
        m = await message.reply_text("·¥°·¥Ä…™·¥õ  10 s·¥á·¥Ñ·¥è…¥·¥Ös")
        karma = await get_karmas(chat_id)
        if not karma:
            await m.edit("…¥·¥è ·¥ã·¥Ä Ä·¥ç·¥Ä …™…¥ DB “ì·¥è Ä ·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ.")
            return
        msg = f"**·¥ã·¥Ä Ä·¥ç·¥Ä  ü…™s·¥õ ·¥è“ì {message.chat.title}:- **\n"
        limit = 0
        karma_dicc = {}
        for i in karma:
            user_id = await alpha_to_int(i)
            user_karma = karma[i]["karma"]
            karma_dicc[str(user_id)] = user_karma
            karma_arranged = dict(
                sorted(karma_dicc.items(), key=lambda item: item[1], reverse=True)
            )
        if not karma_dicc:
            await m.edit("…¥·¥è ·¥ã·¥Ä Ä·¥ç·¥Ä …™…¥ DB “ì·¥è Ä ·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ.")
            return
        for user_idd, karma_count in karma_arranged.items():
            if limit > 9:
                break
            try:
                user = await app.get_users(int(user_idd))
                await asyncio.sleep(0.8)
            except Exception:
                continue
            first_name = user.first_name
            if not first_name:
                continue
            username = user.username
            msg += f"**{karma_count}**  {(first_name[0:12] + '...') if len(first_name) > 12 else first_name}  `{('@' + username) if username else user_idd}`\n"
            limit += 1
        await m.edit(msg)
    else:
        user_id = message.reply_to_message.from_user.id
        karma = await get_karma(chat_id, await int_to_alpha(user_id))
        karma = karma["karma"] if karma else 0
        await message.reply_text(f"**·¥õ·¥è·¥õ·¥Ä ü ·¥ò·¥è…™…¥·¥õ :** {karma}")


__mod_name__ = "ùô∫·¥Ä Ä·¥ç·¥Ä"
__help__ = """

*·¥ú·¥ò·¥†·¥è·¥õ·¥á* - ·¥ús·¥á ·¥ú·¥ò·¥†·¥è·¥õ·¥á ·¥ã·¥á è·¥°·¥è Ä·¥Ös  ü…™·¥ã·¥á "+", "+1", "thanks", ·¥á·¥õ·¥Ñ. ·¥õ·¥è ·¥ú·¥ò·¥†·¥è·¥õ·¥á ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á.
*·¥Ö·¥è·¥°…¥·¥†·¥è·¥õ·¥á* - ·¥ús·¥á ·¥Ö·¥è·¥°…¥·¥†·¥è·¥õ·¥á ·¥ã·¥á è·¥°·¥è Ä·¥Ös  ü…™·¥ã·¥á "-", "-1", ·¥á·¥õ·¥Ñ. ·¥õ·¥è ·¥Ö·¥è·¥°…¥·¥†·¥è·¥õ·¥á ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á.

*·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös*

‚çü /karmastats:- ` Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ús·¥á Ä ·¥õ·¥è ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥õ ú·¥Ä·¥õ ·¥ús·¥á Ä's  ·¥ã·¥Ä Ä·¥ç·¥Ä ·¥ò·¥è…™…¥·¥õs`

‚çü /karmastats:- `s·¥á…¥·¥Ö ·¥°…™·¥õ ú·¥è·¥ú·¥õ  Ä·¥á·¥ò ü è…™…¥…¢ ·¥õ·¥è ·¥Ä…¥ è ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥ã·¥Ä Ä·¥ç·¥Ä ·¥ò·¥è…™…¥·¥õ  ü…™s·¥õ of ·¥õ·¥è·¥ò 10`

‚çü /karma :- `·¥á…¥·¥Ä ô ü·¥á/·¥Ö…™s·¥Ä ô ü·¥á karma …™…¥  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò `
"""
