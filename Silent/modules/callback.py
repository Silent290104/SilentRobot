from pyrogram.types import CallbackQuery

from Silent import pgram as bot


@bot.on_callback_query()
async def close(Client, cb: CallbackQuery):
    if cb.data == "close_":
        await cb.answer()
        await cb.message.delete()


import time

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ParseMode, Update
from telegram.ext import CallbackContext, CallbackQueryHandler

from Silent import (
    BOT_NAME,
    OWNER_ID,
    SUPPORT_CHAT,
    UPDATES_CHANNEL,
    StartTime,
    dispatcher,
)


def get_readable_time(seconds: int) -> str:
    count = 0
    ping_time = ""
    time_list = []
    time_suffix_list = ["s", "·¥ç", " ú", "·¥Ö·¥Ä ès"]

    while count < 4:
        count += 1
        remainder, result = divmod(seconds, 60) if count < 3 else divmod(seconds, 24)
        if seconds == 0 and remainder == 0:
            break
        time_list.append(int(result))
        seconds = int(remainder)

    for x in range(len(time_list)):
        time_list[x] = str(time_list[x]) + time_suffix_list[x]
    if len(time_list) == 4:
        ping_time += f"{time_list.pop()}, "

    time_list.reverse()
    ping_time += ":".join(time_list)

    return ping_time


def Silent_about_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    if query.data == "about_":
        get_readable_time((time.time() - StartTime))
        query.message.edit_text(
            text=f"* ú·¥á è,*ü•Ä\n  *·¥õ ú…™s …™s {BOT_NAME}*"
            "\n*·¥Ä ·¥ò·¥è·¥°·¥á ÄÍú∞·¥ú ü …¢ Ä·¥è·¥ú·¥ò ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ  ô·¥è·¥õ  ô·¥ú…™ ü·¥õ ·¥õ·¥è  ú·¥á ü·¥ò  è·¥è·¥ú ·¥ç·¥Ä…¥·¥Ä…¢·¥á  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ·¥á·¥ÄÍú±…™ ü è ·¥Ä…¥·¥Ö ·¥õ·¥è ·¥ò Ä·¥è·¥õ·¥á·¥Ñ·¥õ  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò Íú∞ Ä·¥è·¥ç Íú±·¥Ñ·¥Ä·¥ç·¥ç·¥á ÄÍú± ·¥Ä…¥·¥Ö Íú±·¥ò·¥Ä·¥ç·¥ç·¥á ÄÍú±.*"
            "\n*·¥° Ä…™·¥õ·¥õ·¥á…¥ …™…¥ ·¥© è·¥õ ú·¥è…¥ ·¥°…™·¥õ ú s«´ ü·¥Ä ü·¥Ñ ú·¥á·¥ç è ·¥Ä…¥·¥Ö ·¥ç·¥è…¥…¢·¥è·¥Ö ô ·¥Äs ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á.*"
            "\n\n‚û≤  …™ ·¥Ñ·¥Ä…¥  Ä·¥áÍú±·¥õ Ä…™·¥Ñ·¥õ ·¥úÍú±·¥á ÄÍú±."
            "\n‚û≤  …™  ú·¥Ä·¥†·¥á ·¥Ä…¥ ·¥Ä·¥Ö·¥†·¥Ä…¥·¥Ñ·¥á·¥Ö ·¥Ä…¥·¥õ…™-Íú∞ ü·¥è·¥è·¥Ö Íú± èÍú±·¥õ·¥á·¥ç."
            "\n‚û≤  …™ ·¥Ñ·¥Ä…¥ …¢ Ä·¥á·¥á·¥õ ·¥úÍú±·¥á ÄÍú± ·¥°…™·¥õ ú ·¥Ñ·¥úÍú±·¥õ·¥è·¥ç…™·¥¢·¥Ä ô ü·¥á ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥áÍú± ·¥Ä…¥·¥Ö ·¥á·¥†·¥á…¥ Íú±·¥á·¥õ ·¥Ä …¢ Ä·¥è·¥ú·¥ò'Íú±  Ä·¥ú ü·¥áÍú±."
            "\n‚û≤  …™ ·¥Ñ·¥Ä…¥ ·¥°·¥Ä Ä…¥ ·¥úÍú±·¥á ÄÍú± ·¥ú…¥·¥õ…™ ü ·¥õ ú·¥á è  Ä·¥á·¥Ä·¥Ñ ú ·¥ç·¥Äx ·¥°·¥Ä Ä…¥Íú±, ·¥°…™·¥õ ú ·¥á·¥Ä·¥Ñ ú ·¥ò Ä·¥á·¥Ö·¥áÍú∞…™…¥·¥á·¥Ö ·¥Ä·¥Ñ·¥õ…™·¥è…¥Íú± Íú±·¥ú·¥Ñ ú ·¥ÄÍú±  ô·¥Ä…¥, ·¥ç·¥ú·¥õ·¥á, ·¥ã…™·¥Ñ·¥ã, ·¥á·¥õ·¥Ñ."
            "\n‚û≤  …™  ú·¥Ä·¥†·¥á ·¥Ä …¥·¥è·¥õ·¥á ·¥ã·¥á·¥á·¥ò…™…¥…¢ Íú± èÍú±·¥õ·¥á·¥ç,  ô ü·¥Ä·¥Ñ·¥ã ü…™Íú±·¥õÍú±, ·¥Ä…¥·¥Ö ·¥á·¥†·¥á…¥ ·¥ò Ä·¥á·¥Ö·¥á·¥õ·¥á Ä·¥ç…™…¥·¥á·¥Ö  Ä·¥á·¥ò ü…™·¥áÍú± ·¥è…¥ ·¥Ñ·¥á Ä·¥õ·¥Ä…™…¥ ·¥ã·¥á è·¥°·¥è Ä·¥ÖÍú±."
            f"\n\n‚ûª ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥s …¢…™·¥†·¥á…¥  ô·¥á ü·¥è·¥° “ì·¥è Ä …¢·¥á·¥õ·¥õ…™…¥…¢  ô·¥Äs…™·¥Ñ  ú·¥á ü·¥© ·¥Ä…¥·¥Ö …™…¥“ì·¥è ·¥Ä ô·¥è·¥ú·¥õ {BOT_NAME}.",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="s·¥ú·¥©·¥©·¥è Ä·¥õ", callback_data="Silent_support"
                        ),
                        InlineKeyboardButton(
                            text="·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös", callback_data="help_back"
                        ),
                    ],
                    [
                        InlineKeyboardButton(
                            text="·¥Ö·¥á·¥†·¥á ü·¥è·¥©·¥á Ä", url=f"tg://user?id={OWNER_ID}"
                        ),
                        InlineKeyboardButton(
                            text="s·¥è·¥ú Ä·¥Ñ·¥á",
                            callback_data="source_",
                        ),
                    ],
                    [
                        InlineKeyboardButton(text="‚óÅ", callback_data="Silent_back"),
                    ],
                ]
            ),
        )


def Silent_support_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    if query.data == "Silent_support":
        query.message.edit_text(
            text="*‡πè ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥s …¢…™·¥†·¥á…¥  ô·¥á ü·¥è·¥° ·¥õ·¥è …¢·¥á·¥õ  ú·¥á ü·¥© ·¥Ä…¥·¥Ö ·¥ç·¥è Ä·¥á …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥ ·¥Ä ô·¥è·¥ú·¥õ ·¥ç·¥á.*"
            f"\n\n…™“ì  è·¥è·¥ú “ì·¥è·¥ú…¥·¥Ö ·¥Ä…¥ è  ô·¥ú…¢ …™…¥ {BOT_NAME} ·¥è Ä …™“ì  è·¥è·¥ú ·¥°·¥Ä…¥…¥·¥Ä …¢…™·¥†·¥á “ì·¥á·¥á·¥Ö ô·¥Ä·¥Ñ·¥ã ·¥Ä ô·¥è·¥ú·¥õ ·¥õ ú·¥á {BOT_NAME}, ·¥© ü·¥á·¥Äs·¥á  Ä·¥á·¥©·¥è Ä·¥õ …™·¥õ ·¥Ä·¥õ s·¥ú·¥©·¥©·¥è Ä·¥õ ·¥Ñ ú·¥Ä·¥õ.",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="s·¥ú·¥©·¥©·¥è Ä·¥õ", url=f"https://t.me/{SUPPORT_CHAT}"
                        ),
                        InlineKeyboardButton(
                            text="·¥ú·¥©·¥Ö·¥Ä·¥õ·¥ás", url=f"https://t.me/{UPDATES_CHANNEL}"
                        ),
                    ],
                    [
                        InlineKeyboardButton(
                            text="·¥Ö·¥á·¥†·¥á ü·¥è·¥©·¥á Ä", url=f"tg://user?id={OWNER_ID}"
                        ),
                        InlineKeyboardButton(
                            text="…¢…™·¥õ ú·¥ú ô",
                            callback_data="source_",
                        ),
                    ],
                    [
                        InlineKeyboardButton(text="‚óÅ", callback_data="Silent_back"),
                    ],
                ]
            ),
        )


def Source_about_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    if query.data == "source_":
        query.message.edit_text(
            text=f"""
* ú·¥á è,
 ·¥õ ú…™s …™s {BOT_NAME},
·¥Ä…¥ ·¥è·¥©·¥á…¥ s·¥è·¥ú Ä·¥Ñ·¥á ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç …¢ Ä·¥è·¥ú·¥© ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ  ô·¥è·¥õ.*

·¥° Ä…™·¥õ·¥õ·¥á…¥ …™…¥ ·¥© è·¥õ ú·¥è…¥ ·¥°…™·¥õ ú ·¥õ ú·¥á  ú·¥á ü·¥© ·¥è“ì : [·¥õ·¥á ü·¥á·¥õ ú·¥è…¥](https://github.com/LonamiWebs/Telethon)
[·¥© è Ä·¥è…¢ Ä·¥Ä·¥ç](https://github.com/pyrogram/pyrogram)
[·¥© è·¥õ ú·¥è…¥-·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç- ô·¥è·¥õ](https://github.com/python-telegram-bot/python-telegram-bot)
·¥Ä…¥·¥Ö ·¥ús…™…¥…¢ [s«´ ü·¥Ä ü·¥Ñ ú·¥á·¥ç è](https://www.sqlalchemy.org) ·¥Ä…¥·¥Ö [·¥ç·¥è…¥…¢·¥è](https://cloud.mongodb.com) ·¥Äs ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á.


* ú·¥á Ä·¥á …™s ·¥ç è s·¥è·¥ú Ä·¥Ñ·¥á ·¥Ñ·¥è·¥Ö·¥á :* […¢…™·¥õ ú·¥ú ô- Ä·¥á·¥ò·¥è](https://github.com/Wolf2901/SilentRobot)


{BOT_NAME} …™s  ü…™·¥Ñ·¥á…¥s·¥á·¥Ö ·¥ú…¥·¥Ö·¥á Ä ·¥õ ú·¥á [·¥ç…™·¥õ  ü…™·¥Ñ·¥á…¥s·¥á](https://github.com/Wolf2901/SilentRobot/blob/master/LICENSE).
¬© 2022 - 2023 [@Total_masti](https://t.me/{SUPPORT_CHAT}), ·¥Ä ü ü  Ä…™…¢ ú·¥õs  Ä·¥ás·¥á Ä·¥†·¥á·¥Ö.
""",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton(text="‚óÅ", callback_data="help_back")]]
            ),
        )


Silent_about_callback = CallbackQueryHandler(
    Silent_about_callback, pattern=r"about_", run_async=True
)
Source_about_callback = CallbackQueryHandler(
    Source_about_callback, pattern=r"source_", run_async=True
)
Silent_support_callback = CallbackQueryHandler(
    Silent_support_callback, pattern=r"Silent_support", run_async=True
)


dispatcher.add_handler(Silent_about_callback)
dispatcher.add_handler(Source_about_callback)
dispatcher.add_handler(Silent_support_callback)
